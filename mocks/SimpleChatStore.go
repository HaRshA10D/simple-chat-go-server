// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import gorm "github.com/jinzhu/gorm"
import mock "github.com/stretchr/testify/mock"
import model "source.golabs.io/ops-tech-peeps/simple-chat-go-server/model"

// SimpleChatStore is an autogenerated mock type for the SimpleChatStore type
type SimpleChatStore struct {
	mock.Mock
}

// CreateGroup provides a mock function with given fields: group
func (_m *SimpleChatStore) CreateGroup(group model.Group) (model.Group, error) {
	ret := _m.Called(group)

	var r0 model.Group
	if rf, ok := ret.Get(0).(func(model.Group) model.Group); ok {
		r0 = rf(group)
	} else {
		r0 = ret.Get(0).(model.Group)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Group) error); ok {
		r1 = rf(group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: user
func (_m *SimpleChatStore) CreateUser(user *model.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DB provides a mock function with given fields:
func (_m *SimpleChatStore) DB() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// FindUserByToken provides a mock function with given fields: token
func (_m *SimpleChatStore) FindUserByToken(token string) (model.User, error) {
	ret := _m.Called(token)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(string) model.User); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
